<?php


namespace App\Repositories\Term;


use App\Http\Resources\Term\TermResource;
use App\Models\Subject;
use App\Models\Term;
use App\Repositories\BaseRepository;
use Illuminate\Support\Facades\DB;

class TermRepository extends BaseRepository
{
  /**
   * Specify Model class name.
   *
   * @return mixed
   */
  public function model()
  {
    return Term::class;
  }

  /**
   * Create a new model record in the database.
   *
   * @param array $data
   *
   * @return \Illuminate\Database\Eloquent\Model
   */
  public function create(array $data)
  {
    return DB::transaction(function () use ($data) {
      $term = parent::create(array_diff_key($data, array_flip(['subjects']))); // TODO: Change the autogenerated stub
      $quizFormat = $this->getQuizFormatArr($data['subjects']);
      $term->subjects()->sync($quizFormat);
      return $term;
    });
  }

  /**
   * Lấy thông tin định dạng đề thi của từng môn học để lưu vào trong bảng subject_term
   * @param array $subjectIds
   * @return array
   */
  public function getQuizFormatArr($subjectIds)
  {
    $dataArr = [];
    foreach ($subjectIds as $item) {
      $tmpSubject = Subject::find((int)$item);
      $format = $tmpSubject->format;
      $quizFormat = $format->format;
      $dataArr["".$item] = ['quiz_format' => json_encode($quizFormat)];
    }
    return $dataArr;
  }

  public function update(Term $term, array $data)
  {
    return DB::transaction(function () use ($term, $data) {
      $term->update(array_diff_key($data, array_flip(['subjects'])));
      $quizFormat = $this->getQuizFormatArr($data['subjects']);
      $term->subjects()->sync($quizFormat);
      return $term;
    });
  }


}
